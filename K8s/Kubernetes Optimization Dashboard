{"version":15,"variables":[{"key":"kubectlCPU","type":"query","visible":false,"input":"timeseries {\n      requests = max(dt.kubernetes.container.requests_cpu, default:0),\n      limits = max(dt.kubernetes.container.limits_cpu, default:0),\n      usage = max(dt.kubernetes.container.cpu_usage, default:0)\n    }, \n    by:{k8s.workload.kind, k8s.workload.name, k8s.container.name, k8s.namespace.name}, \n    from: toTimestamp($dt_timeframe_from), \n    to:bin(toTimestamp($dt_timeframe_to), 1h),\n    filter:{in(k8s.namespace.name, {$Namespace}) and k8s.cluster.name==$Cluster}\n| fieldsAdd cpu_slack = (requests[] - usage[])\n| filterOut arrayLast(requests) == 0\n| fieldsAdd current_requests=toLong(arrayLast(requests)), \n    current_usage=toLong(arrayLast(usage)), \n    max_usage=arrayMax(usage), \n    limit=toLong(arrayLast(limits)), \n    suggested_requests=arrayMax(array(toLong(round(toDouble(arrayPercentile(usage, toLong($CPU_Request_Percentile))*(1+toDouble($CPU_Buffer_Percent)/100))/10)* 10), 5)), \n    suggested_limit=arrayMax(array(toLong(round(toDouble(arrayMax(usage)*(1+toDouble($CPU_Buffer_Percent)/100))/10)* 10), 5)), \n    slack=toLong(arrayAvg(cpu_slack))\n| sort slack desc\n| limit 20\n| fields kubectl=concat(\"kubectl set resources \", k8s.workload.kind, \" \", k8s.workload.name, \" -c \", k8s.container.name, \" -n \", k8s.namespace.name, \" --requests=cpu=\", suggested_requests, \"m --limits=cpu=\", suggested_limit, \"m #was: requests:\", current_requests, \"m limits: \", limit, \"m slack: \", slack, \"m\")\n| summarize kubectl=collectArray(kubectl)\n| fields replaceString(replaceString(replaceString(toString(kubectl), \"\\\", \\\"\", \"\\n\"),\"[\\\"\", \"\"), \"\\\"]\", \"\")","multiple":false},{"key":"Cluster","type":"query","visible":true,"input":"fetch dt.entity.kubernetes_cluster\n| fields entity.name\n| sort entity.name asc","multiple":false},{"key":"Namespace","type":"query","visible":true,"input":"fetch dt.entity.cloud_application_namespace\n| filter clustered_by[dt.entity.kubernetes_cluster] in [\n  fetch dt.entity.kubernetes_cluster\n  | filter entity.name == $Cluster\n  | fields id\n]\n| fields entity.name\n| sort entity.name","multiple":true},{"key":"kubectlMEMORY","type":"query","visible":false,"input":"timeseries {\n      requests = max(dt.kubernetes.container.requests_memory, default:0),\n      limits = max(dt.kubernetes.container.limits_memory, default:0),\n      usage = max(dt.kubernetes.container.memory_working_set, default:0)\n    }, \n    by:{k8s.workload.kind, k8s.workload.name, k8s.container.name, k8s.namespace.name}, \n    from: toTimestamp($dt_timeframe_from), \n    to:bin(toTimestamp($dt_timeframe_to), 1h),\n    filter:{in(k8s.namespace.name, {$Namespace}) and k8s.cluster.name==$Cluster}\n| fieldsAdd requests=requests[]/1024/1024, limits=limits[]/1024/1024, usage=usage[]/1024/1024\n| fieldsAdd memory_slack = (requests[] - usage[])\n| filterOut arrayLast(requests) == 0\n| fieldsAdd current_requests=toLong(arrayLast(requests)), \n    current_usage=toLong(arrayLast(usage)), \n    max_usage=arrayMax(usage), \n    limit=toLong(arrayLast(limits)), \n    suggested_requests=arrayMax(array(toLong(round(toDouble(arrayPercentile(usage, toLong($Memory_Request_Percentile))*(1+toDouble($Memory_Buffer_Percent)/100))/10)* 10), 5)), \n    suggested_limit=arrayMax(array(toLong(round(toDouble(arrayMax(usage)*(1+toDouble($Memory_Buffer_Percent)/100))/10)* 10), 5)), \n    slack=toLong(arrayAvg(memory_slack))\n| sort slack desc\n| limit 20\n| fields kubectl=concat(\"kubectl set resources \", k8s.workload.kind, \" \", k8s.workload.name, \" -c \", k8s.container.name, \" -n \", k8s.namespace.name, \" --requests=memory=\", suggested_requests, \"m --limits=memory=\", suggested_limit, \"m #was: requests:\", current_requests, \"m limits:\", limit, \"m Average slack: \", slack, \"m\")\n| summarize kubectl=collectArray(kubectl)\n| fields replaceString(replaceString(replaceString(toString(kubectl), \"\\\", \\\"\", \"\\n\"),\"[\\\"\", \"\"), \"\\\"]\", \"\")","multiple":false},{"key":"CPU_Buffer_Percent","type":"text","visible":true,"defaultValue":"10"},{"key":"CPU_Request_Percentile","type":"text","visible":true,"defaultValue":"90"},{"key":"Memory_Buffer_Percent","type":"text","visible":true,"defaultValue":"10"},{"key":"Memory_Request_Percentile","type":"text","visible":true,"defaultValue":"100"}],"tiles":{"0":{"type":"data","title":"Top 20 Memory Slack","query":"timeseries {\n      requests = sum(dt.kubernetes.container.requests_memory, default:0, rate: 1m),\n      usage = sum(dt.kubernetes.container.memory_working_set, default:0, rate: 1m)\n    }, by:{k8s.namespace.name, dt.entity.cloud_application, k8s.container.name, dt.entity.cloud_application_namespace},\n    filter:{in(k8s.namespace.name, {$Namespace}) and k8s.cluster.name==$Cluster},\n    from: toTimestamp($dt_timeframe_from), \n    to: bin(toTimestamp($dt_timeframe_to), 1h)\n| fieldsAdd memory_slack = (requests[] - usage[])\n| fieldsRemove requests, usage\n| sort arrayMin(memory_slack) desc\n| limit 20\n| fieldsAdd entityName(dt.entity.cloud_application)","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"areaChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"k8s.namespace.name","categoryAxisLabel":"k8s.namespace.name","valueAxis":"interval","valueAxisLabel":"interval","tooltipVariant":"single"},"fieldMapping":{"timestamp":"timeframe","leftAxisValues":["memory_slack"],"leftAxisDimensions":["k8s.namespace.name","dt.entity.cloud_application","k8s.container.name","dt.entity.cloud_application_namespace","dt.entity.cloud_application.name"]},"truncationMode":"end","legend":{"position":"bottom","hidden":false},"hiddenLegendFields":["dt.entity.cloud_application","k8s.namespace.name","dt.entity.cloud_application_namespace"]},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"dt.entity.cloud_application","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{"value":"interval"},"displayedFields":["k8s.namespace.name"]},"histogram":{"dataMappings":[{"valueAxis":"interval","rangeAxis":""}]},"unitsOverrides":[{"identifier":"memory_slack","unitCategory":"data","baseUnit":"byte","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1722528195460}]},"timeframe":{"tileTimeframeEnabled":false,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"1":{"type":"data","title":"Top 20 CPU Slack","query":"timeseries {\n      requests = sum(dt.kubernetes.container.requests_cpu, default:0, rate: 1m),\n      usage = sum(dt.kubernetes.container.cpu_usage, default:0, rate: 1m)\n    }, by:{k8s.namespace.name, dt.entity.cloud_application, k8s.container.name, dt.entity.cloud_application_namespace},\n    filter:{in(k8s.namespace.name, {$Namespace}) and k8s.cluster.name==$Cluster}, \n    from: toTimestamp($dt_timeframe_from), \n    to: bin(toTimestamp($dt_timeframe_to), 1h)\n| fieldsAdd cpu_slack = requests[] - usage[]\n| fieldsRemove requests, usage\n| sort arrayMin(cpu_slack) desc\n| limit 20\n| fieldsAdd entityName(dt.entity.cloud_application)","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"areaChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"gap","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"k8s.namespace.name","categoryAxisLabel":"k8s.namespace.name","valueAxis":"interval","valueAxisLabel":"interval","tooltipVariant":"single"},"fieldMapping":{"timestamp":"timeframe","leftAxisValues":["cpu_slack"],"leftAxisDimensions":["k8s.namespace.name","dt.entity.cloud_application","k8s.container.name","dt.entity.cloud_application_namespace","dt.entity.cloud_application.name"]},"seriesOverrides":[{"seriesId":["webhook","dynatrace-webhook"],"override":{"color":"#b3007d"}}],"legend":{"position":"bottom","hidden":false},"truncationMode":"end","hiddenLegendFields":["dt.entity.cloud_application","k8s.namespace.name","dt.entity.cloud_application_namespace"]},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"dt.entity.cloud_application","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{"value":"interval"},"displayedFields":["k8s.namespace.name"]},"histogram":{"dataMappings":[{"valueAxis":"interval","rangeAxis":""}]},"unitsOverrides":[{"identifier":"cpu_slack","unitCategory":"unspecified","baseUnit":"millicore","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1722528090861}]},"timeframe":{"tileTimeframeEnabled":false,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"2":{"type":"data","title":"","query":"timeseries {\n      requests = sum(dt.kubernetes.container.requests_memory, default:0, rate:1m),\n       limits = sum(dt.kubernetes.container.limits_memory, default:0, rate:1m),\n      usage = sum(dt.kubernetes.container.memory_working_set, default:0, rate:1m)\n    }, \n    by:{k8s.workload.kind, k8s.workload.name, k8s.container.name, k8s.namespace.name}, \n    from: toTimestamp($dt_timeframe_from), \n    to:bin(toTimestamp($dt_timeframe_to), 1h),\n    filter:{in(k8s.namespace.name, {$Namespace}) and k8s.cluster.name==$Cluster}\n| fieldsAdd memory_slack = (requests[] - usage[])\n| filterOut arrayLast(requests) == 0\n| fieldsAdd current_requests=toLong(arrayLast(requests)), \n    current_usage=toLong(arrayLast(usage)), \n    max_usage=arrayMax(usage), \n    limit=toLong(arrayLast(limits)), \n    suggested_requests=arrayMax(array(toLong(round(toDouble(arrayPercentile(usage, toLong($Memory_Request_Percentile))*(1+toDouble($Memory_Buffer_Percent)/100))/10)* 10), 5)), \n    suggested_limit=arrayMax(array(toLong(round(toDouble(arrayMax(usage)*(1+toDouble($Memory_Buffer_Percent)/100))/10)* 10), 5)), \n    slack=toLong(arrayAvg(memory_slack))\n| summarize `Memory Optimization Potential`=sum(current_requests-suggested_requests)","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[{"id":1,"field":"Memory Optimization Potential","title":"","isEnabled":true,"rules":[{"id":0,"color":"#2F6863","comparator":"≥","label":"","value":0},{"id":1,"color":{"Default":"var(--dt-colors-charts-status-warning-default, #eca440)"},"comparator":"≥","label":"","value":10000000000},{"id":2,"color":{"Default":"var(--dt-colors-charts-status-critical-default, #c4233b)"},"comparator":"≥","label":"","value":20000000000},{"id":3,"color":{"Default":"var(--dt-colors-charts-categorical-color-04-default, #d85a9f)"},"comparator":"<","label":"","value":0}]}],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxisLabel":"k8s.container.name","valueAxisLabel":"interval"},"hiddenLegendFields":["dt.entity.cloud_application"]},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"Memory Optimization Potential","autoscale":true,"alignment":"center","colorThresholdTarget":"background"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{"value":"Memory Optimization Potential"},"displayedFields":[null]},"histogram":{"dataMappings":[{"valueAxis":"Memory Optimization Potential","rangeAxis":""}]},"unitsOverrides":[{"identifier":"Memory Optimization Potential","unitCategory":"data","baseUnit":"byte","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1722528195460}]},"timeframe":{"tileTimeframeEnabled":false,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"3":{"type":"data","title":"","query":"timeseries {\n      requests = sum(dt.kubernetes.container.requests_memory, default:0, rate:1m),\n       limits = sum(dt.kubernetes.container.limits_memory, default:0, rate:1m),\n      usage = sum(dt.kubernetes.container.memory_working_set, default:0, rate:1m)\n    }, \n    by:{k8s.workload.kind, k8s.workload.name, k8s.container.name, k8s.namespace.name}, \n    from: toTimestamp($dt_timeframe_from), \n    to:bin(toTimestamp($dt_timeframe_to), 1h),\n    filter:{in(k8s.namespace.name, {$Namespace}) and k8s.cluster.name==$Cluster}\n| fieldsAdd memory_slack = (requests[] - usage[])\n| filterOut arrayLast(requests) == 0\n| fieldsAdd current_requests=toLong(arrayLast(requests)), \n    current_usage=toLong(arrayLast(usage)), \n    max_usage=arrayMax(usage), \n    limit=toLong(arrayLast(limits)), \n    suggested_requests=arrayMax(array(toLong(round(toDouble(arrayPercentile(usage, toLong($Memory_Request_Percentile))*(1+toDouble($Memory_Buffer_Percent)/100))/10)* 10), 5)), \n    suggested_limit=arrayMax(array(toLong(round(toDouble(arrayMax(usage)*(1+toDouble($Memory_Buffer_Percent)/100))/10)* 10), 5)), \n    slack=toLong(arrayAvg(memory_slack))\n| summarize `Memory Optimization Potential`=100*(sum(current_requests)-sum(suggested_requests))/sum(current_requests)","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[{"id":1,"field":"Memory Optimization Potential","title":"","isEnabled":true,"rules":[{"id":0,"color":"#2F6863","comparator":"≥","label":"","value":0},{"id":1,"color":{"Default":"var(--dt-colors-charts-status-warning-default, #eca440)"},"comparator":"≥","label":"","value":30},{"id":2,"color":{"Default":"var(--dt-colors-charts-status-critical-default, #c4233b)"},"comparator":"≥","label":"","value":50},{"id":3,"color":{"Default":"var(--dt-colors-charts-categorical-color-04-default, #d85a9f)"},"comparator":"<","label":"","value":0}]}],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxisLabel":"k8s.container.name","valueAxisLabel":"interval"},"hiddenLegendFields":["dt.entity.cloud_application"]},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"Memory Optimization Potential","autoscale":true,"alignment":"center","colorThresholdTarget":"background"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{"value":"Memory Optimization Potential"},"displayedFields":[null]},"histogram":{"dataMappings":[{"valueAxis":"Memory Optimization Potential","rangeAxis":""}]},"unitsOverrides":[{"identifier":"Memory Optimization Potential","unitCategory":"percentage","baseUnit":"percent","displayUnit":null,"decimals":2,"suffix":"","delimiter":false,"added":1722528195460}]},"timeframe":{"tileTimeframeEnabled":false,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"4":{"type":"data","title":"","query":"timeseries {\n      requests = sum(dt.kubernetes.container.requests_cpu, default:0, rate:1m),\n      limits = sum(dt.kubernetes.container.limits_cpu, default:0, rate:1m),\n      usage = sum(dt.kubernetes.container.cpu_usage, default:0, rate:1m)\n    }, \n    by:{k8s.workload.kind, k8s.workload.name, k8s.container.name, k8s.namespace.name}, \n    from: toTimestamp($dt_timeframe_from), \n    to:bin(toTimestamp($dt_timeframe_to), 1h),\n    filter:{in(k8s.namespace.name, {$Namespace}) and k8s.cluster.name==$Cluster}\n| fieldsAdd cpu_slack = (requests[] - usage[])\n| filterOut arrayLast(requests) == 0\n| fieldsAdd current_requests=toLong(arrayLast(requests)), \n    current_usage=toLong(arrayLast(usage)), \n    max_usage=arrayMax(usage), \n    limit=toLong(arrayLast(limits)), \n    suggested_requests=arrayMax(array(toLong(round(toDouble(arrayPercentile(usage, toLong($CPU_Request_Percentile))*(1+toDouble($CPU_Buffer_Percent)/100))/10)* 10), 5)), \n    suggested_limit=arrayMax(array(toLong(round(toDouble(arrayMax(usage)*(1+toDouble($CPU_Buffer_Percent)/100))/10)* 10), 5)), \n    slack=toLong(arrayAvg(cpu_slack))\n| summarize `CPU Optimization Potential`=100*(sum(current_requests)-sum(suggested_requests))/sum(current_requests)","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[{"id":1,"field":"CPU Optimization Potential","title":"","isEnabled":true,"rules":[{"id":0,"color":{"Default":"var(--dt-colors-charts-status-ideal-default, #2f6863)"},"comparator":"≥","label":"","value":0},{"id":1,"color":{"Default":"var(--dt-colors-charts-status-warning-default, #eca440)"},"comparator":"≥","label":"","value":30},{"id":2,"color":{"Default":"var(--dt-colors-charts-status-critical-default, #c4233b)"},"comparator":"≥","label":"","value":50},{"id":3,"color":{"Default":"var(--dt-colors-charts-categorical-color-04-default, #d85a9f)"},"comparator":"<","label":"","value":0}]}],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxisLabel":"k8s.container.name","valueAxisLabel":"interval"},"hiddenLegendFields":["dt.entity.cloud_application"]},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"CPU Optimization Potential","autoscale":true,"alignment":"center","colorThresholdTarget":"background"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{"value":"CPU Optimization Potential"},"displayedFields":[null]},"histogram":{"dataMappings":[{"valueAxis":"CPU Optimization Potential","rangeAxis":""}]},"unitsOverrides":[{"identifier":"CPU Optimization Potential","unitCategory":"percentage","baseUnit":"percent","displayUnit":null,"decimals":2,"suffix":"","delimiter":false,"added":1722528195460}]},"timeframe":{"tileTimeframeEnabled":false,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"5":{"type":"data","title":"","query":"timeseries {\n      requests = sum(dt.kubernetes.container.requests_cpu, default:0, rate:1m),\n      limits = sum(dt.kubernetes.container.limits_cpu, default:0, rate:1m),\n      usage = sum(dt.kubernetes.container.cpu_usage, default:0, rate:1m)\n    }, \n    by:{k8s.workload.kind, k8s.workload.name, k8s.container.name, k8s.namespace.name}, \n    from: toTimestamp($dt_timeframe_from), \n    to:bin(toTimestamp($dt_timeframe_to), 1h),\n    filter:{in(k8s.namespace.name, {$Namespace}) and k8s.cluster.name==$Cluster}\n| fieldsAdd cpu_slack = (requests[] - usage[])\n| filterOut arrayLast(requests) == 0\n| fieldsAdd current_requests=toLong(arrayLast(requests)), \n    current_usage=toLong(arrayLast(usage)), \n    max_usage=arrayMax(usage), \n    limit=toLong(arrayLast(limits)), \n    suggested_requests=arrayMax(array(toLong(round(toDouble(arrayPercentile(usage, toLong($CPU_Request_Percentile))*(1+toDouble($CPU_Buffer_Percent)/100))/10)* 10), 5)), \n    suggested_limit=arrayMax(array(toLong(round(toDouble(arrayMax(usage)*(1+toDouble($CPU_Buffer_Percent)/100))/10)* 10), 5)), \n    slack=toLong(arrayAvg(cpu_slack))\n| summarize `CPU Optimization Potential`=sum(current_requests-suggested_requests)","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"singleValue","visualizationSettings":{"thresholds":[{"id":1,"field":"CPU Optimization Potential","title":"","isEnabled":true,"rules":[{"id":0,"color":{"Default":"var(--dt-colors-charts-status-ideal-default, #2f6863)"},"comparator":"≥","label":"","value":0},{"id":1,"color":{"Default":"var(--dt-colors-charts-status-warning-default, #eca440)"},"comparator":"≥","label":"","value":1000},{"id":2,"color":{"Default":"var(--dt-colors-charts-status-critical-default, #c4233b)"},"comparator":"≥","label":"","value":10000},{"id":3,"color":{"Default":"var(--dt-colors-charts-categorical-color-04-default, #d85a9f)"},"comparator":"<","label":"","value":0}]}],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxisLabel":"k8s.container.name","valueAxisLabel":"interval"},"hiddenLegendFields":["dt.entity.cloud_application"]},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"CPU Optimization Potential","autoscale":true,"alignment":"center","colorThresholdTarget":"background"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{"value":"CPU Optimization Potential"},"displayedFields":[null]},"histogram":{"dataMappings":[{"valueAxis":"CPU Optimization Potential","rangeAxis":""}]},"unitsOverrides":[{"identifier":"CPU Optimization Potential","unitCategory":"unspecified","baseUnit":"millicore","displayUnit":null,"decimals":2,"suffix":"","delimiter":false,"added":1722528195460}]},"timeframe":{"tileTimeframeEnabled":false,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"6":{"type":"data","title":"CPU Slack","query":"timeseries {\n      requests = max(dt.kubernetes.container.requests_cpu, default:0),\n      limits = max(dt.kubernetes.container.limits_cpu, default:0),\n      usage = max(dt.kubernetes.container.cpu_usage, default:0)\n    }, \n    by:{k8s.workload.kind, k8s.workload.name, k8s.container.name, k8s.namespace.name,dt.entity.cloud_application, dt.entity.cloud_application_namespace},\n    from: toTimestamp($dt_timeframe_from), \n    to:bin(toTimestamp($dt_timeframe_to), 1h),\n    filter:{in(k8s.namespace.name, {$Namespace}) and k8s.cluster.name==$Cluster}\n| fieldsAdd cpu_slack = (requests[] - usage[])\n| filterOut arrayLast(requests) == 0\n| fieldsAdd current_requests=toLong(arrayLast(requests)), \n    current_usage=toLong(arrayLast(usage)), \n    max_usage=arrayMax(usage), \n    limit=toLong(arrayLast(limits)), \n    suggested_requests=arrayMax(array(toLong(round(toDouble(arrayPercentile(usage, toLong($CPU_Request_Percentile))*(1+toDouble($CPU_Buffer_Percent)/100))/10)* 10), 5)), \n    suggested_limit=arrayMax(array(toLong(round(toDouble(arrayMax(usage)*(1+toDouble($CPU_Buffer_Percent)/100))/10)* 10), 5)), \n    slack=toLong(arrayAvg(cpu_slack))\n| sort slack desc\n| limit 20\n","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"gap","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"k8s.workload.name","categoryAxisLabel":"k8s.workload.name","valueAxis":"current_requests","valueAxisLabel":"current_requests","tooltipVariant":"single"},"fieldMapping":{"timestamp":"timeframe","leftAxisValues":["requests","limits","usage","cpu_slack"],"leftAxisDimensions":["k8s.workload.kind","k8s.workload.name","k8s.container.name","k8s.namespace.name","dt.entity.cloud_application","dt.entity.cloud_application_namespace","current_requests","current_usage","max_usage","limit","suggested_requests","suggested_limit","slack"]},"hiddenLegendFields":["dt.entity.cloud_application"],"seriesOverrides":[{"seriesId":["webhook","dynatrace-webhook"],"override":{"color":"#b3007d"}}],"legend":{"position":"auto","hidden":false},"truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"dt.entity.cloud_application","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":true,"hiddenColumns":[["timeframe"],["interval"],["dt.entity.cloud_application"],["k8s.workload.kind"],["requests"],["limits"],["dt.entity.cloud_application_namespace"]],"lineWrapIds":[],"columnWidths":{"[\"cpu_slack\"]":200.984375,"[\"usage\"]":193.1125030517578}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{"value":"interval"},"displayedFields":["k8s.workload.kind"]},"histogram":{"dataMappings":[{"valueAxis":"interval","rangeAxis":""},{"valueAxis":"current_requests","rangeAxis":""},{"valueAxis":"current_usage","rangeAxis":""},{"valueAxis":"max_usage","rangeAxis":""},{"valueAxis":"limit","rangeAxis":""},{"valueAxis":"suggested_requests","rangeAxis":""},{"valueAxis":"suggested_limit","rangeAxis":""},{"valueAxis":"slack","rangeAxis":""}]},"unitsOverrides":[{"identifier":"suggested_limit","unitCategory":"unspecified","baseUnit":"millicore","displayUnit":"millicore","decimals":0,"suffix":"","delimiter":false,"added":1722528090861},{"identifier":"current_requests","unitCategory":"unspecified","baseUnit":"millicore","displayUnit":"millicore","decimals":0,"suffix":"","delimiter":false,"added":1722548690642},{"identifier":"current_usage","unitCategory":"unspecified","baseUnit":"millicore","displayUnit":"millicore","decimals":0,"suffix":"","delimiter":false,"added":1722548714933},{"identifier":"slack","unitCategory":"unspecified","baseUnit":"millicore","displayUnit":"millicore","decimals":0,"suffix":"","delimiter":false,"added":1722548736300},{"identifier":"limit","unitCategory":"unspecified","baseUnit":"millicore","displayUnit":"millicore","decimals":0,"suffix":"","delimiter":false,"added":1725516963276},{"identifier":"suggested_requests","unitCategory":"unspecified","baseUnit":"millicore","displayUnit":"millicore","decimals":0,"suffix":"","delimiter":false,"added":1725517017134},{"identifier":"max_usage","unitCategory":"unspecified","baseUnit":"millicore","displayUnit":"millicore","decimals":0,"suffix":"","delimiter":false,"added":1725517040240}]},"timeframe":{"tileTimeframeEnabled":false,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"7":{"type":"markdown","title":"","content":"### Script for automatic sizing\n\n##### CPU\n```\n$kubectlCPU\n```\n##### Memory\n```\n$kubectlMEMORY\n```"},"8":{"type":"data","title":"Memory Slack","query":"timeseries {\n      requests = max(dt.kubernetes.container.requests_memory, default:0),\n      limits = max(dt.kubernetes.container.limits_memory, default:0),\n      usage = max(dt.kubernetes.container.memory_working_set, default:0)\n    }, \n    by:{k8s.workload.kind, k8s.workload.name, k8s.container.name, k8s.namespace.name, dt.entity.cloud_application, dt.entity.cloud_application_namespace},\n    from: toTimestamp($dt_timeframe_from), \n    to:bin(toTimestamp($dt_timeframe_to), 1h),\n    filter:{in(k8s.namespace.name, {$Namespace}) and k8s.cluster.name==$Cluster}\n| fieldsAdd memory_slack = (requests[] - usage[])\n| filterOut arrayLast(requests) == 0\n| fieldsAdd current_requests=toLong(arrayLast(requests)), current_usage=toLong(arrayLast(usage)), max_usage=arrayMax(usage), limit=toLong(arrayLast(limits)), suggested_requests=arrayMax(array(toLong(round(toDouble(arrayPercentile(usage, toLong($Memory_Request_Percentile))*(1+toDouble($Memory_Buffer_Percent)/100))/10)* 10), 5)), suggested_limit=arrayMax(array(toLong(round(toDouble(arrayMax(usage)*(1+toDouble($Memory_Buffer_Percent)/100))/10)* 10), 5)), slack=toLong(arrayAvg(memory_slack))\n| sort slack desc\n| limit 20","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"gap","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"k8s.workload.name","categoryAxisLabel":"k8s.workload.name","valueAxis":"current_requests","valueAxisLabel":"current_requests","tooltipVariant":"single"},"fieldMapping":{"timestamp":"timeframe","leftAxisValues":["requests","limits","usage","memory_slack"],"leftAxisDimensions":["k8s.workload.kind","k8s.workload.name","k8s.container.name","k8s.namespace.name","dt.entity.cloud_application","dt.entity.cloud_application_namespace","current_requests","current_usage","max_usage","limit","suggested_requests","suggested_limit","slack"]},"hiddenLegendFields":["dt.entity.cloud_application"],"seriesOverrides":[{"seriesId":["webhook","dynatrace-webhook"],"override":{"color":"#b3007d"}}],"legend":{"position":"auto","hidden":false},"truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"dt.entity.cloud_application","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":true,"hiddenColumns":[["timeframe"],["interval"],["dt.entity.cloud_application"],["k8s.workload.kind"],["requests"],["limits"],["dt.entity.cloud_application_namespace"]],"lineWrapIds":[],"columnWidths":{"[\"cpu_slack\"]":341.984375,"[\"usage\"]":185.1125030517578,"[\"memory_slack\"]":206.70000457763672}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{"value":"interval"},"displayedFields":["k8s.workload.kind"]},"histogram":{"dataMappings":[{"valueAxis":"interval","rangeAxis":""},{"valueAxis":"current_requests","rangeAxis":""},{"valueAxis":"current_usage","rangeAxis":""},{"valueAxis":"max_usage","rangeAxis":""},{"valueAxis":"limit","rangeAxis":""},{"valueAxis":"suggested_requests","rangeAxis":""},{"valueAxis":"suggested_limit","rangeAxis":""},{"valueAxis":"slack","rangeAxis":""}]},"unitsOverrides":[{"identifier":"suggested_limit","unitCategory":"data","baseUnit":"byte","displayUnit":"mebibyte","decimals":0,"suffix":"","delimiter":false,"added":1722528090861},{"identifier":"current_requests","unitCategory":"data","baseUnit":"byte","displayUnit":"mebibyte","decimals":0,"suffix":"","delimiter":false,"added":1722548690642},{"identifier":"current_usage","unitCategory":"data","baseUnit":"byte","displayUnit":"mebibyte","decimals":0,"suffix":"","delimiter":false,"added":1722548714933},{"identifier":"slack","unitCategory":"data","baseUnit":"byte","displayUnit":"mebibyte","decimals":0,"suffix":"","delimiter":false,"added":1722548736300},{"identifier":"limit","unitCategory":"data","baseUnit":"byte","displayUnit":"mebibyte","decimals":0,"suffix":"","delimiter":false,"added":1725516963276},{"identifier":"suggested_requests","unitCategory":"data","baseUnit":"byte","displayUnit":"mebibyte","decimals":0,"suffix":"","delimiter":false,"added":1725517017134},{"identifier":"max_usage","unitCategory":"data","baseUnit":"byte","displayUnit":"mebibyte","decimals":0,"suffix":"","delimiter":false,"added":1725517040240}]},"timeframe":{"tileTimeframeEnabled":false,"tileTimeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"9":{"type":"markdown","title":"","content":"### How to use this dashboard\n\n * Select the Cluster that you'd like to optimize\n * Select the Namespace(s) that you'd like to optimize\n * Check out the recommended values below!\n \n Optimizing the workloads is dependent on a number of factors. First of all, make sure you look at a representative sample for your workload (at least 7 days are recommended, 30 days preferred)\n### How do I decide on what values to put for CPU_Request_Percentile and Memory_Request_Percentile?\nKubernetes defines [3 Quality of service classes](https://kubernetes.io/docs/concepts/workloads/pods/pod-qos/)\n1. **Guaranteed**: To achieve this service class, requests for both CPU and Memory need to be equal to the limit, so CPU_Request_Percentile and Memory_Request_Percentile need to be set to 100 - these pods are the least likely to get evicted\n2. **Burstable**: To achieve this service class, at least one of the requests/limits needs to be set. This is what most of your pods should be in order to ensure the least number of evictions while also saving on cost. \n    * **CPU**: A good starting point for optimization is 80% for CPU_Request percentile (to make sure that 80% of times, you will not exceed CPU requests). Often times, no CPU limits are set at all to avoid throttling issues and make best use of a node resource. CPU limits should be set for workloads which are known to overconsume CPU vs. other workloads\n    * **Memory**: A general best practice in Kubernetes is to set requests=limits for memory (Memory_Request_Percentile=100) to avoid OOMKills of your application. That said - reducing the memory requests vs. the limits can still give you cost savings. A good number for starting optimization here would be 90.\n3. **Best-effort**: Pods without resource restrictions. Only use for Pods that you can afford to get evicted and use up a lot of resources (e.g. long running batch jobs). The goal of this dashboard is to avoid having any best-effort pods.\n\n### What should I set for the buffers?\nA good starting point is starting with a 10% buffer - the dashboard is taking the maximums of what has been observed so far."}},"layouts":{"0":{"x":12,"y":5,"w":12,"h":9},"1":{"x":0,"y":5,"w":12,"h":9},"2":{"x":12,"y":0,"w":6,"h":5},"3":{"x":18,"y":0,"w":6,"h":5},"4":{"x":6,"y":0,"w":6,"h":5},"5":{"x":0,"y":0,"w":6,"h":5},"6":{"x":0,"y":24,"w":24,"h":7},"7":{"x":0,"y":38,"w":24,"h":16},"8":{"x":0,"y":31,"w":24,"h":7},"9":{"x":0,"y":14,"w":24,"h":10}},"importedWithCode":false,"settings":{"defaultTimeframe":{"value":{"from":"now()-7d","to":"now()"},"enabled":true}}}